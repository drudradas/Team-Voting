{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport createHandler from \"./createHandler\";\nimport { baseGestureHandlerProps } from \"./gestureHandlerCommon\";\nexport var nativeViewGestureHandlerProps = ['shouldActivateOnStart', 'disallowInterruption'];\nexport var nativeViewProps = [].concat(_toConsumableArray(baseGestureHandlerProps), nativeViewGestureHandlerProps);\nexport var nativeViewHandlerName = 'NativeViewGestureHandler';\nexport var NativeViewGestureHandler = createHandler({\n  name: nativeViewHandlerName,\n  allowedProps: nativeViewProps,\n  config: {}\n});","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["nativeViewGestureHandlerProps","nativeViewProps","nativeViewHandlerName","NativeViewGestureHandler","createHandler","name","allowedProps","config"],"mappings":";AAAA,OAAA,aAAA;AACA,SAAA,uBAAA;AAKA,OAAO,IAAMA,6BAA6B,GAAG,CAAA,uBAAA,EAAtC,sBAAsC,CAAtC;AAgCP,OAAO,IAAMC,eAAe,gCAAG,uBAAH,GAArB,6BAAqB,CAArB;AAKP,OAAO,IAAMC,qBAAqB,GAA3B,0BAAA;AAIP,OAAO,IAAMC,wBAAwB,GAAGC,aAAa,CAGnD;AACAC,EAAAA,IAAI,EADJ,qBAAA;AAEAC,EAAAA,YAAY,EAFZ,eAAA;AAGAC,EAAAA,MAAM,EAAE;AAHR,CAHmD,CAA9C","sourcesContent":["import createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const nativeViewGestureHandlerProps = [\n  'shouldActivateOnStart',\n  'disallowInterruption',\n] as const;\n\nexport interface NativeViewGestureConfig {\n  /**\n   * Android only.\n   *\n   * Determines whether the handler should check for an existing touch event on\n   * instantiation.\n   */\n  shouldActivateOnStart?: boolean;\n\n  /**\n   * When `true`, cancels all other gesture handlers when this\n   * `NativeViewGestureHandler` receives an `ACTIVE` state event.\n   */\n  disallowInterruption?: boolean;\n}\n\nexport interface NativeViewGestureHandlerProps\n  extends BaseGestureHandlerProps<NativeViewGestureHandlerPayload>,\n    NativeViewGestureConfig {}\n\nexport type NativeViewGestureHandlerPayload = {\n  /**\n   * True if gesture was performed inside of containing view, false otherwise.\n   */\n  pointerInside: boolean;\n};\n\nexport const nativeViewProps = [\n  ...baseGestureHandlerProps,\n  ...nativeViewGestureHandlerProps,\n] as const;\n\nexport const nativeViewHandlerName = 'NativeViewGestureHandler';\n\nexport type NativeViewGestureHandler = typeof NativeViewGestureHandler;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const NativeViewGestureHandler = createHandler<\n  NativeViewGestureHandlerProps,\n  NativeViewGestureHandlerPayload\n>({\n  name: nativeViewHandlerName,\n  allowedProps: nativeViewProps,\n  config: {},\n});\n"]},"metadata":{},"sourceType":"module"}